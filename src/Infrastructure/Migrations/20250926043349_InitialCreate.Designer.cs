// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250926043349_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GuestId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Domain.Entities.DetalleVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("VentaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetalleVentas");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Kosiuko",
                            Color = "Negro",
                            Description = "Reloj deportivo resistente al agua, ideal para actividades al aire libre.",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Reloj Deportivo",
                            OldPrice = 10m,
                            Price = 10m,
                            Specs = "Cronómetro, GPS, sumergible hasta 50m",
                            Stock = 15
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Knock out",
                            Color = "Rose fondo nacarado",
                            Description = "-Analógico\r\n-Resistente a salpicaduras WR30\r\n-Fondo nacarado con números plateados\r\n-Caja de plástico\r\n-Tapa de acero\r\n-Malla extensible de metal\r\n-Agujas luminiscentes\r\n-Diámetro: 3,5 cm",
                            Images = "[\"/uploads/KnockOutAylen.JPEG\",\"/uploads/KnockOut2.JPEG\"]",
                            Name = "Aylen (chico)",
                            OldPrice = 81000m,
                            Price = 81000m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial de fábrica ante cualquier falla en el funcionamiento del reloj",
                            Stock = 1
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Kosiuko",
                            Color = "Dorado",
                            Description = "Este reloj tiene malla con eslabones, el cual necesita de un relojero para poder ajustarlo, si queres podes dejarnos en comentarios el tamaño de tu muñeca y nos encargamos de enviártelo ajustado listo para usar.\r\n\r\nOtras características:\r\n-Analógico\r\n-Sumergible WR50\r\n-Agujas luminiscentes\r\n-Calendario\r\n-Caja y malla de acero\r\n-Diámetro: 3,8cm",
                            Images = "[\"/uploads/KosiukoMica.JPEG\",\"/uploads/kosiukoMica2.JPEG\"]",
                            Name = "Mica",
                            OldPrice = 110000m,
                            Price = 110000m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial de fábrica ante cualquier falla en el funcionamiento del reloj",
                            Stock = 1
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Kosiuko",
                            Color = "Rose",
                            Description = "Este reloj tiene malla con eslabones...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Flor",
                            OldPrice = 110000m,
                            Price = 110000m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial de fábrica ante cualquier falla en el funcionamiento del reloj",
                            Stock = 1
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Knock out",
                            Color = "Rose fondo nacarado",
                            Description = "-Analógico\r\n-Resistente a salpicaduras: WR30...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Mela",
                            OldPrice = 69330m,
                            Price = 69330m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial de fábrica...",
                            Stock = 1
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Tressa",
                            Color = "rosa bb",
                            Description = "-Analógico\r\n-Sumergible 50 mts...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Margot",
                            OldPrice = 93600m,
                            Price = 93600m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial...",
                            Stock = 1
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Knock out",
                            Color = "Plateado",
                            Description = "Este reloj tiene malla con eslabones...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Mia",
                            OldPrice = 69331m,
                            Price = 69331m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial...",
                            Stock = 1
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Kosiuko",
                            Color = "Plateado con nacar",
                            Description = "Este reloj tiene malla con eslabones...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Abby",
                            OldPrice = 100000m,
                            Price = 100000m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial...",
                            Stock = 1
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Knock out",
                            Color = "Blanco",
                            Description = "-Analógico\r\n-Malla de silicona...",
                            Images = "[\"relojhombre.jpg\"]",
                            Name = "Rita",
                            OldPrice = 64700m,
                            Price = 60480m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial...",
                            Stock = 1
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Knock out",
                            Color = "Plateado",
                            Description = "Este reloj tiene malla con eslabones...",
                            Images = "[\"/uploads/KosiukoGenova.JPG\",\"/uploads/KosiukoGenova2.JPG\"]",
                            Name = "Génova",
                            OldPrice = 74050m,
                            Price = 74050m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial...",
                            Stock = 1
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Knock out",
                            Color = "Plateado fondo nacarado",
                            Description = "-Analógico\r\n-Resistente a salpicaduras...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Berlin",
                            OldPrice = 69330m,
                            Price = 69330m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial...",
                            Stock = 1
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Knock out",
                            Color = "Plateado",
                            Description = "-Analógico\r\n-Resistente a salpicaduras...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Paula",
                            OldPrice = 73344m,
                            Price = 73344m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial...",
                            Stock = 1
                        },
                        new
                        {
                            Id = 13,
                            Brand = "Tressa",
                            Color = "Nude",
                            Description = "-Analógico\r\n-Resistente al agua W30...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Lucia",
                            OldPrice = 73920m,
                            Price = 73920m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial...",
                            Stock = 1
                        },
                        new
                        {
                            Id = 14,
                            Brand = "Tressa",
                            Color = "Tiza con numeros dorados",
                            Description = "-Analógico\r\n-Sumergible 50 mts...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Ari",
                            OldPrice = 93600m,
                            Price = 93600m,
                            Specs = "Todos los relojes cuentan con 1 año de garantía oficial...",
                            Stock = 1
                        },
                        new
                        {
                            Id = 15,
                            Brand = "Tressa",
                            Color = "Blanco fondo dorado",
                            Description = "-Analógico\r\n-Sumergible 50 mts...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Ema",
                            OldPrice = 93600m,
                            Price = 93600m,
                            Specs = "",
                            Stock = 1
                        },
                        new
                        {
                            Id = 16,
                            Brand = "Kosiuko",
                            Color = "Negro",
                            Description = "– Analógico\r\n– Resistencia al agua...",
                            Images = "[\"/uploads/relojhombre.jpg\"]",
                            Name = "Naomi",
                            OldPrice = 89700m,
                            Price = 89700m,
                            Specs = "",
                            Stock = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerLastname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalReference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusDetail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResetToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResetTokenExpira")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Admin", b =>
                {
                    b.HasBaseType("User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "aylenguy@gmail.com",
                            LastName = "Guy",
                            Name = "Aylen",
                            PasswordHash = "$2a$11$/Q98DFfyOZlpeJjmBvNITuxkOoV/PKEEFoYJ8nap1O5VLiGsQq3nu",
                            UserName = "aylen",
                            UserType = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasBaseType("User");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.HasOne("Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.DetalleVenta", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Venta", "Venta")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Ventas")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.Navigation("DetalleVentas");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Ventas");
                });
#pragma warning restore 612, 618
        }
    }
}
